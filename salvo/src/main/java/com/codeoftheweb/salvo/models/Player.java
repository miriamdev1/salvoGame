package com.codeoftheweb.salvo.models;import com.fasterxml.jackson.annotation.JsonIgnore;import org.hibernate.annotations.GenericGenerator;import javax.persistence.*;import java.util.*;import static java.util.stream.Collectors.toList;@Entitypublic class Player {  @Id  @GeneratedValue(strategy = GenerationType.AUTO, generator = "native")  @GenericGenerator(name = "native", strategy = "native")  private Long id;  private String userName;  private String password;  @OneToMany(mappedBy="player", fetch= FetchType.EAGER)  private Set<GamePlayer> gamePlayers = new HashSet<>();  @OneToMany(mappedBy="player", fetch= FetchType.EAGER)  private Set<Score> scores = new HashSet<>();  //Constructor  public Player() { }  public Player(String userName){    this.userName = userName;  }  public Player(String userName,String password){    this.userName = userName;    this.password = password;  }  //Methos  public Long getId(){    return id;  }  public String getUserName(){    return this.userName;  }  public String getPassword() {    return this.password;  }  public void setId(long id) {    this.id = id;  }  public Set<Score> getScores() {    return scores;  }  // DTO Return List<Object>.Player  public Map<String, Object> makePlayerDTO() {    Map<String, Object> dto = new LinkedHashMap<String, Object>();    dto.put("playerId", this.getId());    dto.put("email", this.getUserName());    return dto;  }  //Method that returns a Score that GamePlayer can call, if you are storing scores in the Player class  public Score getScoreByGame(Game game){    return this.scores.stream()                      .filter(score -> score.getGame().getId()                      .equals(game.getId()))                      .findFirst()                      .orElse(null);  }  public Double getAllScore(Player player){    Double total = player.getScores()            .stream()            .mapToDouble( score -> score.getScore())            .sum();    return total;  }  public Long getAllWins(Player player){    Long wins = player.getScores()            .stream()            .filter(score -> score.getScore() == 1.0)            .count();    return wins;  }  public Long getAllLost(Player player){    Long lost = player.getScores()            .stream()            .filter(score -> score.getScore() == 0.0)            .count();    return lost;  }  public Long getAllTied(Player player){    Long tied = player.getScores()            .stream()            .filter(score -> score.getScore() == 0.5)            .mapToDouble(i -> i.getScore().doubleValue())            .count();    return tied;  }  @JsonIgnore  public List<Game> getGames() {    return gamePlayers            .stream()            .map(game -> game.getGame())            .collect(toList());  }}